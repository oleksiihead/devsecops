#!/usr/bin/env python3
"""Helper script to be used as a pre-commit hook."""
import os
import sys
import subprocess
import platform


def gitleaksEnabled():
    """Determine if the pre-commit hook for gitleaks is enabled."""
    out = subprocess.getoutput("git config --bool hooks.gitleaks")
    if out == "false":
        return False
    return True


def installGitleaks():
    """Install gitleaks based on the operating system."""
    current_os = platform.system()
    if current_os == "Linux":
        if not os.path.exists("gitleaks"):
            subprocess.call(["git", "clone", "https://github.com/gitleaks/gitleaks.git"])
        os.chdir("gitleaks")
        subprocess.call(["make", "build"])

        # Get the directory path where the gitleaks executable is located
        gitleaks_dir = os.path.join(os.getcwd())
        print("gitleaks dir is:", gitleaks_dir)

        # Add the gitleaks directory to the PATH variable
        os.environ["PATH"] = gitleaks_dir + os.pathsep + os.environ.get("PATH", "")
        path_variable = os.environ.get("PATH")
        print("PATH variable:", path_variable)

    elif current_os == "Darwin":
        try:
            subprocess.check_output(["brew", "list", "gitleaks"])
            print("Gitleaks is already installed.")
        except subprocess.CalledProcessError:
            subprocess.call(["brew", "install", "gitleaks"])
    else:
        print("Gitleaks installation is only supported on Linux and macOS.")
        sys.exit(1)


def scanLastCommit():
    """Scan the last commit using gitleaks."""
    gitleaks_opts = ["detect", "--redact", "-v"]
    gitleaks_report = "report.json"
    gitleaks_git_logs = "HEAD~1..HEAD"
#     report_path = os.path.join(os.getcwd(), "report.json")
    cmd = [
        "gitleaks",
        *gitleaks_opts,
#         f"--report-path={report_path}",
        f"--report-path",
        gitleaks_report,
        "--log-opts=" + gitleaks_git_logs
    ]
    # Print the command before executing
    print("Executing command:", " ".join(cmd))

    # Execute the command
    exit_code = subprocess.run(" ".join(cmd), shell=True, check=True).returncode
    if exit_code == 1:
        print('''Warning: gitleaks has detected sensitive information in your changes.
To disable the gitleaks pre-commit hook run the following command:

    git config hooks.gitleaks false
''')
        sys.exit(1)



if gitleaksEnabled():
    # Check if gitleaks is installed
    try:
        subprocess.check_output(["gitleaks", "version"])
    except FileNotFoundError:
        print("Gitleaks not found. Installing...")
        installGitleaks()

    # Scan the last commit
    scanLastCommit()
else:
    print('gitleaks pre-commit disabled\
     (enable with `git config hooks.gitleaks true`)')
