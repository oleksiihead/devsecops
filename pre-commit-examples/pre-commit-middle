#!/usr/bin/env python3
"""Helper script to be used as a pre-commit hook."""
import os
import sys
import subprocess
import platform
import urllib.request
import tarfile

DOWNLOAD_URLS = {
    "Linux": {
        "amd64": f"https://github.com/gitleaks/gitleaks/releases/download/v8.16.4/gitleaks_8.16.4_linux_x64.tar.gz",
        "arm64": f"https://github.com/gitleaks/gitleaks/releases/download/v8.16.4/gitleaks_8.16.4_linux_arm64.tar.gz",
    },
    "Darwin": {
        "amd64": f"https://github.com/gitleaks/gitleaks/releases/download/v8.16.4/gitleaks_8.16.4_darwin_x64.tar.gz",
        "arm64": f"https://github.com/gitleaks/gitleaks/releases/download/v8.16.4/gitleaks_8.16.4_darwin_arm64.tar.gz",
    },
}


def install_gitleaks():
    os_name = platform.system()
    arch = platform.machine()
    
    if os_name == "Linux" and arch == "x86_64":
        arch = "amd64"
    elif os_name not in DOWNLOAD_URLS or arch not in DOWNLOAD_URLS[os_name]:
        print(f"Unsupported platform: {os_name} {arch}")
        sys.exit(1)

    download_url = DOWNLOAD_URLS[os_name][arch]
    
    try:
        # Download gitleaks tarball
        filename, headers = urllib.request.urlretrieve(download_url)
        
        # Extract tarball
        with tarfile.open(filename, "r:gz") as tar:
            # Find the gitleaks executable
            gitleaks_name = [name for name in tar.getnames() if os.path.basename(name) == "gitleaks"][0]
            # Extract only the gitleaks executable
            tar.extract(gitleaks_name)
        
        # Add the directory containing gitleaks to PATH
        gitleaks_dir = os.path.dirname(gitleaks_name)
        os.environ["PATH"] = os.path.abspath(gitleaks_dir) + os.pathsep + os.environ["PATH"]
        
        print("gitleaks installed successfully.")
    except Exception as e:
        print(f"Failed to install gitleaks: {str(e)}")
        sys.exit(1)


def gitleaksEnabled():
    """Determine if the pre-commit hook for gitleaks is enabled."""
    out = subprocess.getoutput("git config --bool hooks.gitleaks")
    if out == "false":
        return False
    return True


if gitleaksEnabled():
    try:
        subprocess.run(["gitleaks", "--version"], check=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    except FileNotFoundError:
        install_gitleaks()

    report_path = os.path.join(os.getcwd(), "report.json")
    gitleaks_opts = ["protect", "--redact", "-v", "--staged"]
    gitleaks_report = "report.json"
    gitleaks_git_logs = "HEAD~1..HEAD"
    report_path = os.path.join(os.getcwd(), "report.json")
    cmd = [
        os.path.abspath("gitleaks"),
        *gitleaks_opts,
        f"--report-path={report_path}",
        gitleaks_report,
        "--log-opts=" + gitleaks_git_logs
    ]
    # Print the command before executing
    print("Executing command:", " ".join(cmd))
    try:
        subprocess.run(cmd, check=True)
    except subprocess.CalledProcessError as e:
        if e.stderr is not None:
            print(e.stderr.decode().strip())  # Print the error message from gitleaks
        sys.exit(e.returncode)

else:
    print('gitleaks precommit disabled (enable with `git config hooks.gitleaks true`)')
